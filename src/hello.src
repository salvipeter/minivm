;;; vim: set ft=asm: -*- mode: asm -*-

;;; Lines starting with semicolons are comments
;;;   and everything after the required argument (if any) is ignored.
;;; Starting spaces/tabs are ignored.
;;; If the first word ends with a colon, it is a label.
;;; EQU is a new keyword: the next word has the value of the number after it
;;; STR is a new keyword: everything after it is saved verbatim.
;;; DAT is a new keyword: it is followed by numbers saved as data.

        EQU nl 10         ; Linux-style newline character

        LIT hello         ; take the address of 'hello'
        SET 1             ; ... and put it in [1]
        GET 1             ; take [[1]] (i.e., the value at [1])
loop:
        OUT               ; ... and print
        LIT -1
        SUB 1             ; add 1 to [1]
        SET 1             ; ... and put it in [1]
        GET 0
        JNZ loop          ; jump back if [[0]] (the next character) is not 0
        END
hello:
        STR  Hello World! ; spaces also count (after the first space or tab)
        DAT nl 0          ; labels can be used here, as well
