;;; vim: set ft=asm: -*- mode: asm -*-

n   EQU 47

    LIT n
    SET 1
    LIT after-binary
    SET 2
    JNZ printb
after-binary:
    LIT 10
    OUT

    LIT n
    SET 1
    LIT after-hex
    SET 2
    JNZ printh
after-hex:
    LIT 10
    OUT
    END

;;; ------------------------------ 
;;; PROC: printb (33+6 = 39 bytes)
;;; - [1]: n
;;; - [2]: return address
;;; - [3]: temp

printb:
    LIT 8
    SET 3   ; counter
pb-loop:
    LIT 128
    CGT 1
    JNZ pb1
    LIT 48
    JNZ pb-print
pb1:
    LIT 49
pb-print:
    OUT
pb-one:
    GET pb-one
    SUB pb-zero
    SUB 1
pb-two:
    SET 1
pb-zero:
    LIT 1
    SUB 3
    SET 3
    JNZ pb-loop
    ;; return code
    GET pb-two
    SET pb-ret
    DAT 6
pb-ret:
    DAT 0

;;; ------------------------------ 
;;; PROC: printh (75 + 6 = 81 bytes)
;;; - [1]: n
;;; - [2]: return address
;;; - [3-5]: temp

printh:
    LIT 2
    SET 3   ; outer
ph-out:
    LIT 4
    SET 4   ; inner
    LIT 0
    SET 5   ; value
ph-in:
    GET ph-five
    SUB ph-zero
    SUB 5
    SET 5
    LIT 128
    CGT 1
    JNZ ph1
    LIT 1
    JNZ ph0
ph1:
    LIT -1
    SUB 5
    SET 5
ph0:
ph-one:
    GET ph-one
    SUB ph-zero
    SUB 1
    SET 1
    LIT 1
    SUB 4
    SET 4
    JNZ ph-in
    LIT 10
ph-five:
    CGT 5
    JNZ ph-alpha
    LIT -48
    JNZ ph-print
ph-alpha:
    LIT -55
ph-print:
    SUB 5
    OUT
ph-zero:
    LIT 1
    SUB 3
ph-two:
    SET 3
    JNZ ph-out
    ;; return code
    GET ph-two
    SET ph-ret
    DAT 6
ph-ret:
    DAT 0

